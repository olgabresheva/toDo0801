{"version":3,"sources":["ToDoCreateForm.js","ToDoItem.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoCreateForm","props","useState","taskNameInput","setTaskNameInput","taskDescriptionInput","setTaskDescriptionInput","addTaskDisabled","setAddTaskDisabled","htmlFor","className","type","value","placeholder","onChange","e","target","length","disabled","onClick","onNewTaskAdd","preventDefault","deleteBtn","width","height","viewBox","fill","xmlns","d","fillRule","doneBtn","toDoBtn","downBtn","upBtn","ToDoItem","editMode","setEditMode","item","name","editTaskTitle","setEditTaskTitle","taskEditSave","_id","done","onDoubleClick","id","onStatusChange","onTaskDelete","onTaskMove","ToDoList","list","map","el","key","onTaskEditSave","App","setList","getFullList","axios","url","method","then","res","data","catch","console","log","useEffect","description","state","newTitle","direction","updatedList","i","findIndex","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c5f29a48.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Main.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction ToDoCreateForm(props) {\n\n    const [taskNameInput, setTaskNameInput] = useState('')\n    const [taskDescriptionInput, setTaskDescriptionInput] = useState('')\n    const [addTaskDisabled, setAddTaskDisabled] = useState(true);\n\n    //function for task creation and controlling of button being active/disabled\n    const newTaskDescriptionInput = (e) => {\n        setTaskDescriptionInput(e.target.value);\n        (taskDescriptionInput.length > 2) ? setAddTaskDisabled(false) : setAddTaskDisabled(true);\n    }\n\n    const addNewTask = (e) => {\n        props.onNewTaskAdd(taskNameInput, taskDescriptionInput);\n        setTaskNameInput('');\n        setTaskDescriptionInput('')\n        e.preventDefault();\n        setAddTaskDisabled(true)\n    }\n\n    return (\n        <div>\n            <label htmlFor=\"exampleFormControlInput1\"><strong>Your To Do List</strong></label><br/>\n            <form>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <input type=\"text\" className=\"form-control form-control-sm\" value={taskNameInput}\n                               placeholder=\"Enter Task Name\"\n                               onChange={e => setTaskNameInput(e.target.value)}/>\n                    </div>\n                    <div className=\"col\">\n                        <input type=\"text\" className=\"form-control form-control-sm\" value={taskDescriptionInput}\n                               placeholder=\"Enter Task Description\"\n                               onChange={newTaskDescriptionInput}/>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <button disabled={addTaskDisabled} type=\"submit\" className=\"btn btn-info btn-sm\"\n                                onClick={addNewTask}>Add Task\n                        </button>\n                    </div>\n                </div>\n            </form>\n            <span> </span>\n        </div>\n    );\n}\n\nexport default ToDoCreateForm;\n","import React, {useState} from 'react';\nimport './Main.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst deleteBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n</svg>);\n\nconst doneBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-check-square\" fill=\"currentColor\"\n                      xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z\"/>\n</svg>);\n\nconst toDoBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-square\" fill=\"currentColor\"\n                      xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n</svg>);\n\nconst downBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-down\" fill=\"currentColor\"\n                      xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"/>\n</svg>);\n\nconst upBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-up\" fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\"\n          d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/>\n</svg>);\n\nfunction ToDoItem(props) {\n\n    const [editMode, setEditMode] = useState(false);\n    const [editTaskTitle, setEditTaskTitle] = useState(props.item.name);\n\n    const onTaskEditSave = () => {\n        props.taskEditSave(props.item._id, editTaskTitle);\n        setEditMode(false);\n    }\n\n    return (\n        <div className=\"input-group\">\n            {/*edit mode handler*/}\n            {editMode\n                ? <>\n                    <input type=\"text\" className=\"form-control form-control-sm\"\n                           value={editTaskTitle} onChange={(e) => setEditTaskTitle(e.target.value)}/>\n                    <button className=\"btn btn-outline-secondary btn-sm\" onClick={onTaskEditSave}>Save</button>\n                </>\n                :\n                <span className={props.item.done ? \"done form-control form-control-sm\" : \"form-control form-control-sm\"}\n                      onDoubleClick={() => setEditMode(true)}>\n                    {props.item.name}\n                </span>\n            }\n            <div className=\"input-group-append\" id=\"button-addon\">\n                <button className=\"btn btn-outline-secondary btn-sm\"\n                        onClick={() => props.onStatusChange(props.item._id, props.item.done)}>{props.item.done ? doneBtn : toDoBtn}</button>\n                <button className=\"btn btn-outline-secondary btn-sm\"\n                        onClick={() => props.onTaskDelete(props.item._id)}>{deleteBtn}</button>\n                <button className=\"btn btn-outline-secondary btn-sm\"\n                        onClick={() => props.onTaskMove(props.item._id, 'up')}>{upBtn}</button>\n                <button className=\"btn btn-outline-secondary btn-sm\"\n                        onClick={() => props.onTaskMove(props.item._id, 'down')}>{downBtn}</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ToDoItem;\n","import React from 'react';\nimport './Main.css';\nimport ToDoItem from \"./ToDoItem\";\n\n\nfunction ToDoList(props) {\n    return (\n        <div className=\"ToDoList\">\n            <ul className=\"list-unstyled\">\n                {props.list.map(el => <li key={el._id}>\n                    <ToDoItem item={el}\n                              onTaskDelete={props.onTaskDelete}\n                              onStatusChange={props.onStatusChange}\n                              onTaskEditSave={props.onTaskEditSave}\n                              taskEditSave={props.taskEditSave}\n                              onTaskMove={props.onTaskMove}/>\n                </li>)}\n            </ul>\n\n\n        </div>\n    );\n}\n\nexport default ToDoList;\n","import React, {useEffect, useState} from 'react';\nimport './Main.css';\nimport ToDoCreateForm from \"./ToDoCreateForm\";\nimport ToDoList from \"./ToDoList\";\nimport {uuid} from \"uuidv4\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport axios from 'axios';\n\n// const initialList = [\n//     {id: 1, title: 'Task 1', done: true},\n//     {id: 2, title: 'Task 2', done: false},\n//     {id: 3, title: 'Task 3', done: true},\n// ];\n\nfunction App() {\n\n    const [list, setList] = useState([]);\n\n    const getFullList = () => {\n        axios({\n            url: 'http://localhost:5000/todo',\n            method: 'GET',\n        })\n            .then(res => {\n                setList(res.data)\n            })\n            .catch(e => console.log(e))\n    }\n\n    useEffect(() => {\n        getFullList();\n    }, []);\n\n    const onTaskDelete = (id) => {\n        axios({\n            url: `http://localhost:5000/todo/${id}`,\n            method: 'DELETE'\n        })\n            .then(res => {\n                getFullList()\n            })\n            .catch(e => console.log(e))\n    };\n\n    // const onTaskDelete = (id) => {\n    //     const updatedList = list.filter(el => el.id !== id);\n    //     setList(updatedList);\n    // }\n\n\n    const onNewTaskAdd = (name, description) => {\n        axios({\n            url: 'http://localhost:5000/todo/',\n            method: 'POST',\n            data: {name, description}\n        })\n            .then(res => {\n                getFullList()\n            })\n            .catch(e => console.log(e))\n    };\n\n    // const onNewTaskAdd = (title, description) => {\n    //     const updatedList = [...list];\n    //     updatedList.push({id: uuid(), name: title, description: description, done: false});\n    //     setList(updatedList);\n    // }\n\n    const onStatusChange = (id, state) => {\n        axios({\n            url: `http://localhost:5000/todo/${id}`,\n            method: 'PUT',\n            data: {done: !state},\n        })\n            .then(res => {\n                getFullList()\n            })\n            .catch(e => console.log(e))\n    }\n\n    // const onStatusChange = (id) => {\n    //     const updatedList = list.map(el => {\n    //         if (el.id === id) {\n    //             return ({...el, done: !el.done})\n    //         } else return el\n    //     })\n    //     setList(updatedList);\n    // }\n\n    const taskEditSave = (id, newTitle) => {\n        axios({\n            url: `http://localhost:5000/todo/${id}`,\n            method: 'PATCH',\n            data: {name: newTitle}\n        })\n            .then(res => {\n                getFullList()\n            })\n            .catch(e => e.target.value)\n    }\n\n    // const taskEditSave = (id, newTitle) => {\n    //     const updatedList = list.map(el => {\n    //         if (el.id === id) {\n    //             return ({...el, name: newTitle})\n    //         } else return el;\n    //     })\n    //     setList(updatedList);\n    // }\n\n    //function which changes array element location based on given direction\n    const onTaskMove = (id, direction) => {\n        let i = list.findIndex(el => el.id === id);\n        let updatedList;\n        updatedList = [...list];\n        if (direction === 'up') {\n            if (i !== 0) {\n                updatedList.splice(i - 1, 0, updatedList.splice(i, 1)[0]);\n            }\n        }\n        if (direction === 'down') {\n            updatedList.splice(i + 1, 0, updatedList.splice(i, 1)[0])\n        }\n        setList(updatedList);\n    }\n\n    return (\n        <div className=\"container\">\n            <ToDoCreateForm onNewTaskAdd={onNewTaskAdd}/>\n            <hr/>\n            <ToDoList list={list}\n                      onTaskDelete={onTaskDelete}\n                      onStatusChange={onStatusChange}\n                      taskEditSave={taskEditSave}\n                      onTaskMove={onTaskMove}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}