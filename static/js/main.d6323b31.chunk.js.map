{"version":3,"sources":["ToDoCreateForm.js","ToDoItem.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoCreateForm","props","useState","newTaskInput","setNewTaskInput","className","type","value","onChange","e","target","onClick","onNewTaskAdd","ToDoItem","editMode","setEditMode","item","title","editTaskTitle","setEditTaskTitle","onTaskMove","id","taskEditSave","done","onStatusChange","onTaskDelete","ToDoList","list","map","el","key","onTaskEditSave","initialList","App","setList","updatedList","push","uuid","filter","newTitle","direction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6323b31.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Main.css';\n\nfunction ToDoCreateForm(props) {\n\n    const [newTaskInput, setNewTaskInput] = useState('')\n\n    const addNewTask = () => {\n        props.onNewTaskAdd(newTaskInput);\n        setNewTaskInput('');\n    }\n\n    return (\n        <div className=\"ToDoCreateForm\">\n            <input type=\"text\" value={newTaskInput} onChange={(e) => setNewTaskInput(e.target.value)}/>\n            <button onClick={addNewTask}>Add Task</button>\n        </div>\n    );\n}\n\nexport default ToDoCreateForm;\n","import React, {useState} from 'react';\nimport './Main.css';\n\nfunction ToDoItem(props) {\n\n    const [editMode, setEditMode] = useState(false);\n    const [editTaskTitle, setEditTaskTitle] = useState(props.item.title);\n\n    const onTaskEditSave = () => {\n        props.taskEditSave(props.item.id, editTaskTitle);\n        setEditMode(false);\n    }\n\n    return (\n        <div className=\"ToDoItem\">\n            <button onClick={() => props.onTaskMove(props.item.id, 'up')}>UP</button>\n            <button onClick={() => props.onTaskMove(props.item.id, 'down')}>DOWN</button>\n            {editMode\n                ? <>\n                    <input value={editTaskTitle} onChange={(e) => setEditTaskTitle(e.target.value)}/>\n                    <button onClick={onTaskEditSave}>Save</button>\n                </>\n                : <span className={props.item.done ? \"done\" : \"\"} onClick={() => setEditMode(true)}>{props.item.title}</span>\n            }\n            <button onClick={() => props.onStatusChange(props.item.id)}>{props.item.done ? 'Done' : 'ToDo'}</button>\n            <button onClick={() => props.onTaskDelete(props.item.id)}>Delete</button>\n        </div>\n    );\n}\n\nexport default ToDoItem;\n","import React from 'react';\nimport './Main.css';\nimport ToDoItem from \"./ToDoItem\";\n\nfunction ToDoList(props) {\n    return (\n        <div className=\"ToDoList\">\n            {props.list.map(el => <div key={el.id}>\n                <ToDoItem item={el}\n                          onTaskDelete={props.onTaskDelete}\n                          onStatusChange={props.onStatusChange}\n                          onTaskEditSave={props.onTaskEditSave}\n                          taskEditSave={props.taskEditSave}\n                          onTaskMove={props.onTaskMove}/>\n            </div>)}\n\n\n        </div>\n    );\n}\n\nexport default ToDoList;\n","import React, {useState} from 'react';\nimport './Main.css';\nimport ToDoCreateForm from \"./ToDoCreateForm\";\nimport ToDoList from \"./ToDoList\";\nimport {uuid} from \"uuidv4\";\n\nconst initialList = [\n    {id: 1, title: 'Task 1', done: true},\n    {id: 2, title: 'Task 2', done: false},\n    {id: 3, title: 'Task 3', done: true},\n];\n\nfunction App() {\n\n    const [list, setList] = useState(initialList);\n\n    const onNewTaskAdd = (title) => {\n        const updatedList = [...list];\n        updatedList.push({id: uuid(), title: title, done: false});\n        setList(updatedList);\n    }\n\n    const onTaskDelete = (id) => {\n        const updatedList = list.filter(el => el.id !== id);\n        setList(updatedList);\n    }\n\n    const onStatusChange = (id) => {\n        const updatedList = list.map(el => {\n            if(el.id === id){return ({...el, done: !el.done})}\n            else return el\n        })\n        setList(updatedList);\n    }\n\n    const taskEditSave = (id, newTitle) => {\n        const updatedList = list.map(el => {\n            if(el.id === id){return ({...el, title: newTitle})}\n            else return el;\n        })\n        setList(updatedList);\n    }\n\n    const onTaskMove = (id, direction) => {\n        // let i = list.findIndex(el => el.id === id);\n        // console.log(i);\n        // let newIndex;\n        // let updatedList;\n        // // if(direction === 'up'){newIndex = i - 1;}\n        // //    else if(direction === 'down'){newIndex = i + 1;}\n        // // const updatedList = list.splice(newIndex, 0, list[i]);\n        // if(direction === 'up'){\n        //     updatedList = list.splice(i-1, 0, list[i])\n        // }\n        // if(direction === 'down'){\n        //     updatedList = list.splice(i+1, 0, list[i])\n        // }\n        // setList(updatedList);\n    }\n\n    return (\n        <div className=\"App\">\n            <ToDoCreateForm onNewTaskAdd={onNewTaskAdd}/>\n            <ToDoList list={list}\n                      onTaskDelete={onTaskDelete}\n                      onStatusChange={onStatusChange}\n                      taskEditSave={taskEditSave}\n                      onTaskMove={onTaskMove}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}